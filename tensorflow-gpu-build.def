Bootstrap: debootstrap
MirrorURL: http://archive.ubuntu.com/ubuntu/
OSVersion: bionic
Include: software-properties-common

%labels

    APPLICATION_NAME Nvidia CUDA + TensorFlow 1.14.0
    OS_VERSION 18.04 + 10.0 
    APPLICATION_URL https://developer.nvidia.com/cuda-zone

    SYSTEM_NAME UCT ICTS HPC
    SYSTEM_SINGULARITY_VERSION 3.2
    SYSTEM_URL http://hpc.uct.ac.za

    AUTHOR_NAME Timothy Carr
    AUTHOR_EMAIL eresearch@uct.ac.za

%environment
    # Set system locale
    export LC_ALL=C
    
    # Nvidia CUDA Path
    export CPATH="/usr/local/cuda/include:$CPATH"
    export PATH="/usr/local/cuda/bin:$PATH"
    export LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu/:/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
    export CUDA_HOME="/usr/local/cuda"
     
%post -c /bin/bash

    # Nvidia CUDA Path
    export CPATH="/usr/local/cuda/include:$CPATH"
    export PATH="/usr/local/cuda/bin:$PATH"
    export LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu/:/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
    export CUDA_HOME="/usr/local/cuda"

    # Declare variables for downloaded applications
    declare -r CUDA_FILE=cuda_10.0.130_410.48_linux
    declare -r NVIDIA_DEV_URL=https://developer.download.nvidia.com/compute
    declare -r ML_REPO_FILE=nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb
    declare -r TF_VER=1.14.0

    # Update Ubuntu Cache and begin install 
    apt-add-repository universe
    apt update -y
    apt install -y build-essential wget python3-pip apt-utils curl
    
    # Download NVIDIA Cuda and begin install 
    wget -nv https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/${CUDA_FILE}
    chmod +x ${CUDA_FILE}
    ./${CUDA_FILE} --toolkit --silent --no-drm --no-man-page --override
   
    # Download and install Nvidia Cudnn 7 and nccl2
    wget -nv ${NVIDIA_DEV_URL}/machine-learning/repos/ubuntu1804/x86_64/${ML_REPO_FILE}
    dpkg -i ${ML_REPO_FILE}
    apt-key adv --fetch-keys ${NVIDIA_DEV_URL}/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
    apt update -y 
    apt install -y libc-ares-dev libcudnn7 libnccl2 libcudnn7-dev  

    # Tensorflow Install 
    pip3 install tensorflow-gpu==${TF_VER} hyperopt

    # Clean Up 
    apt clean
    apt autoclean
    apt autoremove -y 
    rm ${CUDA_FILE}
    rm ${ML_REPO_FILE}

%help 
This is a TensorFlow 1.14 container. It includes the NVIDIA CUDA toolkit but not the NVIDIA CUDA drivers. 

%test
# The following tests will be used to test the functionality of the container build
# and the results fed into the CI Jenkins platform. 
set -e 
nvidia-smi -L
python3 -W ignore -c 'import tensorflow as tf'
python3 -W ignore -c 'import hyperopt'
if [ $? -eq 0 ]
then
 echo "Tests Passed" 
 exit 0
else
 echo "Tests Failed " 
 exit 1
fi
